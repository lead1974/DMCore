@page
@model DMCore.Areas.Admin.Pages.DealCategories.IndexModel
@{
    ViewData["Title"] = "Manage Deal Categories";
}

@using DMCore.Data.Core.Domain
@using Kendo.Mvc.UI

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@Html.AntiForgeryToken()

@{
    var culture111 = System.Globalization.CultureInfo.CurrentCulture.ToString();
}

Deal Categories
<script type="text/x-kendo-template" id="template">
    <div>
        <i class="#: FAIcon #"></i><a href=""> #: ShortName #</a>
        <i class="#: FAIcon #"></i><a href=""> #: Name #</a>
        <i class="fas fa-dumbbell"></i><a href=""> #: SortSeq #</a>

    </div>
</script>
@(Html.Kendo().ListView(Model.DcList) //The ListView will be initially bound to the Model which is the Products table.
                        .Name("dcListView") //The name of the ListView is mandatory. It specifies the "id" attribute of the widget.
                        .TagName("div") //The tag name of the ListView is mandatory. It specifies the element which wraps all ListView items.
                        .ClientTemplateId("template") //This template will be used for rendering the ListView items.
)

@(Html.Kendo().Grid<DealCategory>().Name("grid")
                        .Groupable()
                        .Sortable()
                        .Editable()
                        .Scrollable()
                        .ToolBar(x => x.Excel())
                        .Columns(columns =>
                        {
                            columns.Bound(column => column.Name);
                            columns.Bound(column => column.ShortName);
                            columns.Bound(column => column.SortSeq);
                            columns.Command(column =>
                            {
                                column.Edit();
                                column.Destroy();
                            });
                        })
                         .Excel(excel => excel
                                    .FileName("Export.xlsx")
                                    .Filterable(true)
                                    .ProxyURL("/Admin/DealCategories/Index?handler=Save")
                                )
                        .DataSource(ds => ds.Ajax()
                               .Read(r => r.Url("/Admin/DealCategories/Index?handler=Read").Data("forgeryToken"))
                               .Update(u => u.Url("/Index?handler=Update").Data("forgeryToken"))
                               .Create(c => c.Url("/Index?handler=Create").Data("forgeryToken"))
                               .Destroy(d => d.Url("/Index?handler=Destroy").Data("forgeryToken"))
                               .Model(m => m.Id(id => id.Id))
                            .PageSize(10)
                        )
                        .Pageable()
)
<script>
    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }
</script>

@*<div id="grid"></div>

    @(Html.Kendo().Grid<DMCore.Data.Core.Domain.DealCategory>().Name("grid")
                                                    .AutoBind(false)
                                                    .Columns(x =>
                                                    {
                                                        x.Bound(p => p.Name);
                                                        x.Bound(p => p.ShortName);
                                                        x.Bound(p => p.SortSeq);
                                                        x.Bound(p => p.PublicCategory);
                                                        x.Command(c => c.Edit());
                                                    })
                                                    .Editable(editable => editable.Mode(GridEditMode.InLine))
                                                    .DataSource(d =>
                                                        d.Custom()
                                                        .Transport(t =>
                                                        {
                                                            t.Read(r => r.Action("DealCategories", "Index", new { handler = "ReadRecords" }).Type(HttpVerbs.Post));
                                                            t.Update(r => r.Action("DealCategories", "Index", new { handler = "UpdateRecord" }).Type(HttpVerbs.Post));
                                                        })
                                                        .Schema(s => s.Model(m =>
                                                        {
                                                            m.Id(i => i.Id);
                                                        }))
                                                        .PageSize(10)
                                                    )
                                                    .Pageable()
    )

    <script>
        function parameterMap(options, operation) {
            if (operation === "update") {
                options.ClockOut = options.ClockOut.toUTCString();
                return options;
            }
        }

        $(function () {
            var grid = $("#grid").data("kendoGrid");

            grid.dataSource.transport.options.read.beforeSend = function (req) {
                req.setRequestHeader('RequestVerificationToken', $('input:hidden[name="__RequestVerificationToken"]').val());
            };

            grid.dataSource.transport.options.update.beforeSend = function (req) {
                req.setRequestHeader('RequestVerificationToken', $('input:hidden[name="__RequestVerificationToken"]').val());
            };

            grid.dataSource.read();
        });
    </script>*@